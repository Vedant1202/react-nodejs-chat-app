{"version":3,"sources":["redux/user/user.types.js","pages/chat-page/chat-page.component.jsx","pages/dragdrop/dragdrop.pages.jsx","redux/user/user.actions.js","pages/login-page/login-page.component.jsx","redux/user/user.selector.js","pages/register-page/register-page.component.jsx","pages/room/room.pages.jsx","App.js","reportWebVitals.js","redux/store.js","index.js","redux/user/user.reducer.jsx","redux/root.reducer.js"],"names":["UserActionTypes","SET_CURRENT_USER","socket","setCurrentUser","user","type","payload","LoginPage","props","handleChange","event","target","value","name","setState","handleSubmit","history","state","data","email","password","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","response","a","json","ok","error","message","status","Promise","reject","push","catch","errorMessage","toString","console","this","className","title","subTitle","size","placeholder","prefix","UserOutlined","onChange","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","onClick","block","Component","withRouter","connect","dispatch","selectCurrentUser","createSelector","require","currentUser","Search","Input","Header","Layout","Sider","Content","ChatPage","componentDidMount","Authorization","tokens","access","token","io","socketUrl","query","id","userTo","results","users","alert","toggle","collapsed","handleChatSwitch","userId","messages","length","log","on","senderChatID","currentMessage","receiverChatID","text","from","emit","extra","localStorage","removeItem","window","location","reload","onBack","goBack","trigger","collapsible","theme","mode","defaultSelectedKeys","map","i","Item","icon","style","padding","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","margin","minHeight","itemLayout","dataSource","renderItem","item","Meta","description","allowClear","enterButton","onSearch","mapStateToProps","createStructuredSelector","RegisterPage","Option","Select","RoomPage","userlist","roomslist","statusText","forEach","showModal","isModalVisible","handleSelectChange","selectedUsers","roomName","createdBy","handleCancel","handleRedirect","roomId","setItem","rooms","room","role","shape","onOk","onCancel","marginBottom","width","DragDropPage","getItem","userName","placed","counter","e","toShowModal","draggedDivRepeat","modalVisible","modalX","pageX","modalY","pageY","tempEvent","onDrop","handleOk","modalName","trim","onDragStart","ev","repeat","dataTransfer","setData","draggedDivId","onDragOver","preventDefault","cat","getData","tasks","find","task","key","parse","category","selected","positionx","positiony","prevPlaced","savedState","handleClick","newPlaced","filter","pl","handleDelete","String","complete","t","draggable","position","top","left","fontSize","fontWeight","onKeyDown","tabIndex","AppstoreOutlined","marginRight","color","direction","disabled","App","exact","path","render","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","default","createStore","applyMiddleware","store","persistor","persistStore","ReactDOM","document","getElementById","INITIAL_STATE","userReducer","rootReducer","combineReducers","persistConfig","storage","persistReducer"],"mappings":"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","file":"static/js/main.6b369608.chunk.js","sourcesContent":["/** @format */\n\nexport const UserActionTypes = {\n    SET_CURRENT_USER: 'SET_CURRENT_USER',\n};\n","/** @format */\n\nimport React, { Component } from 'react';\nimport './chat-page.styles.scss';\n\nimport { Input, PageHeader, List, Layout, Menu, Button } from 'antd';\nimport { UserOutlined, MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons';\n\nimport { connect } from 'react-redux';\n\nimport { setCurrentUser } from '../../redux/user/user.actions';\nimport { withRouter } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\n\nimport { apiUrl, socketUrl } from '../../config/config.json';\n\nimport { io } from 'socket.io-client';\n\nconst { Search } = Input;\nconst { Header, Sider, Content } = Layout;\n\nlet socket;\n\nclass ChatPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentMessage: '',\n            messages: [],\n            collapsed: false,\n            users: [],\n            userTo: null,\n        };\n    }\n\n    componentDidMount = () => {\n        const { currentUser } = this.props;\n\n        const requestOptions = {\n            method: 'GET',\n            headers: { Authorization: `Bearer ${currentUser.tokens.access.token}` },\n        };\n\n        fetch(apiUrl + '/users', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n\n                if (!response.ok) {\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n\n                socket = io(socketUrl, { query: `chatID=${currentUser.user.id}&token=${currentUser.tokens.access.token}` });\n\n                const userTo = data.results[0].id;\n\n                this.setState({\n                    users: data.results,\n                    userTo,\n                });\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                alert('Error: ' + error + '. Please try refreshing or logging in again.');\n            });\n    };\n\n    handleChange = event => {\n        const { value, name } = event.target;\n\n        this.setState({ [name]: value });\n    };\n\n    toggle = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        });\n    };\n\n    handleChatSwitch = userId => {\n        const { currentUser } = this.props;\n\n        const requestOptions = {\n            method: 'GET',\n            headers: { Authorization: `Bearer ${currentUser.tokens.access.token}` },\n        };\n\n        fetch(apiUrl + `/messages?userId=${currentUser.user.id}&toId=${userId}`, requestOptions)\n            .then(async response => {\n                const data = await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n\n                const messages = data && data.length ? data : [];\n\n                this.setState(\n                    {\n                        messages,\n                        userTo: userId,\n                    },\n                    () => {\n                        console.log(this.state);\n                        const { messages, userTo } = this.state;\n                        socket.on('receive_message', message => {\n                            if (message.senderChatID === userTo) {\n                                messages.push(message);\n\n                                this.setState({\n                                    messages,\n                                });\n                            }\n                        });\n                    }\n                );\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                alert('Error: ' + error);\n            });\n    };\n\n    handleSubmit = () => {\n        const { currentMessage, userTo, messages } = this.state;\n        const { currentUser } = this.props;\n\n        const message = {\n            receiverChatID: userTo,\n            senderChatID: currentUser.user.id,\n            text: currentMessage,\n            from: currentUser.user.name,\n        };\n\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${currentUser.tokens.access.token}`,\n            },\n            body: JSON.stringify(message),\n        };\n\n        fetch(apiUrl + '/messages', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n\n                messages.push(message);\n                this.setState({\n                    messages,\n                    currentMessage: '',\n                });\n                socket.emit('send_message', message);\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                alert('Error: ' + error);\n            });\n    };\n\n    render() {\n        const { currentMessage, messages, users } = this.state;\n        const { history, currentUser } = this.props;\n\n        const data = messages;\n\n        return (\n            <div className='chat-page'>\n                <div className='page-header'>\n                    <PageHeader\n                        className='site-page-header'\n                        title='Chat App'\n                        subTitle={currentUser.user.name}\n                        extra={[\n                            <Button\n                                key='1'\n                                onClick={() => {\n                                    history.push('/annotation-rooms');\n                                }}\n                            >\n                                Annotations\n                            </Button>,\n                            <Button\n                                key='2'\n                                onClick={() => {\n                                    localStorage.removeItem('persist:gsoc-challenge-chat-app');\n                                    window.location.reload();\n                                }}\n                            >\n                                Logout\n                            </Button>,\n                        ]}\n                        onBack={() => {\n                            history.goBack();\n                        }}\n                    />\n                    ,\n                </div>\n                <Layout className='messages-layout'>\n                    <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\n                        <div className='logo' />\n                        <Menu theme='dark' mode='inline' className='users-list' defaultSelectedKeys={null}>\n                            {users.map((user, i) =>\n                                user.id !== currentUser.user.id ? (\n                                    <Menu.Item\n                                        key={i}\n                                        onClick={() => {\n                                            this.handleChatSwitch(user.id);\n                                        }}\n                                        icon={<UserOutlined />}\n                                    >\n                                        {user.name}\n                                    </Menu.Item>\n                                ) : null\n                            )}\n                        </Menu>\n                    </Sider>\n                    <Layout className='site-layout'>\n                        <Header className='site-layout-background' style={{ padding: 0 }}>\n                            {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n                                className: 'trigger',\n                                onClick: this.toggle,\n                            })}\n                        </Header>\n                        <Content\n                            className='site-layout-background'\n                            style={{\n                                margin: '24px 16px',\n                                padding: 24,\n                                minHeight: 280,\n                            }}\n                        >\n                            <List\n                                className='messages-div'\n                                itemLayout='horizontal'\n                                dataSource={data}\n                                renderItem={item => (\n                                    <List.Item\n                                        className={\n                                            item.senderChatID === currentUser.user.id ? 'message-ours' : 'message-other'\n                                        }\n                                    >\n                                        <List.Item.Meta\n                                            title={\n                                                <>\n                                                    {' '}\n                                                    {item.from} <UserOutlined />{' '}\n                                                </>\n                                            }\n                                            description={item.text}\n                                        />\n                                    </List.Item>\n                                )}\n                            />\n                        </Content>\n                    </Layout>\n                </Layout>\n                <div className='form'>\n                    <Search\n                        className='chat-input'\n                        placeholder='Enter your message'\n                        allowClear\n                        value={currentMessage}\n                        enterButton='Submit'\n                        size='large'\n                        name='currentMessage'\n                        onChange={this.handleChange}\n                        onSearch={this.handleSubmit}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentUser: user => {\n            dispatch(setCurrentUser(user));\n        },\n    };\n};\n\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser,\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ChatPage));\n","/** @format */\n\nimport React, { Component } from 'react';\nimport './dragdrop.styles.scss';\n\nimport { Modal, Input, Space } from 'antd';\n\nimport { AppstoreOutlined } from '@ant-design/icons';\n\nimport { connect } from 'react-redux';\n\nimport { setCurrentUser } from '../../redux/user/user.actions';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\n\nimport { apiUrl, socketUrl } from '../../config/config.json';\n\nimport { io } from 'socket.io-client';\n\nlet socket;\n// const roomName = window.localStorage.getItem('roomName');\n\nclass DragDropPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [\n                {\n                    key: 'label',\n                    positionx: null,\n                    positiony: null,\n                },\n            ],\n            placed: [],\n            counter: 0,\n            modalVisible: false,\n            modalName: '',\n            tempEvent: null,\n            draggedDivId: '',\n            draggedDivRepeat: '',\n            toShowModal: false,\n            modalX: '',\n            modalY: '',\n            roomName: null,\n            roomId: null,\n            room: null,\n        };\n    }\n\n    // When component mounts, retrieve the previous stored redux data and set the state\n    componentDidMount = () => {\n        const roomId = window.localStorage.getItem('currentRoomId');\n        const roomName = window.localStorage.getItem('roomName');\n\n        const { currentUser } = this.props;\n\n        socket = io(socketUrl, { query: `roomName=${roomName}&token=${currentUser.tokens.access.token}` });\n        socket.on('receive_state', data => {\n            if (data.userId !== currentUser.user.name) {\n                delete data.userName;\n                delete data.roomName;\n                this.setState({\n                    ...data,\n                });\n            }\n        });\n\n        const headers = {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${currentUser.tokens.access.token}`,\n        };\n\n        fetch(apiUrl + `/rooms/manage/${roomId}`, { headers })\n            .then(async response => {\n                const data = await response.json();\n\n                if (!response.ok) {\n                    const error = (data && data.message) || response.statusText;\n                    return Promise.reject(error);\n                }\n\n                let placed = [];\n                if (data.placed.length > 0) {\n                    placed = [...data.placed];\n                }\n\n                this.setState({\n                    roomName,\n                    roomId,\n                    placed,\n                    room: data,\n                    counter: data.counter,\n                    userId: currentUser.user.id,\n                });\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                console.error('Error!: ', error);\n            });\n    };\n\n    // Function to show modal\n    showModal = e => {\n        const { toShowModal, draggedDivRepeat } = this.state;\n        const modalVisible = toShowModal ? true : false;\n        const modalX = e.pageX;\n        const modalY = e.pageY;\n\n        this.setState(\n            {\n                tempEvent: e,\n                modalVisible,\n                modalX,\n                modalY,\n            },\n            () => {\n                if (draggedDivRepeat) {\n                    this.onDrop(e, 'complete');\n                }\n            }\n        );\n    };\n\n    // Handle 'OK' click of modal\n    handleOk = () => {\n        const { modalName, tempEvent } = this.state;\n\n        if (modalName.trim() !== '') {\n            this.setState(\n                {\n                    modalVisible: false,\n                    modalName,\n                    tempEvent: null,\n                },\n                () => {\n                    this.onDrop(tempEvent, 'complete');\n                }\n            );\n        } else {\n            alert('Please fill in all the details');\n        }\n    };\n\n    // Handle closing of modal\n    handleCancel = () => {\n        this.setState({\n            modalVisible: false,\n        });\n    };\n\n    // Handling the start action of dragging an element\n    // The variable 'repeat' indicates if a new component is being added or\n    // if the same component is being dragged to a new place.\n    onDragStart = (ev, id, repeat = false) => {\n        const toShowModal = repeat ? false : true;\n\n        if (repeat) {\n            ev.dataTransfer.setData('id', id);\n            ev.dataTransfer.setData('repeat', repeat);\n        }\n\n        this.setState({\n            draggedDivId: id,\n            draggedDivRepeat: repeat,\n            toShowModal,\n        });\n    };\n\n    // Handling dragging of the component over draggable area\n    onDragOver = ev => {\n        ev.preventDefault();\n    };\n\n    // Handle input typing of modal inputs\n    handleChange = event => {\n        const { value, name } = event.target;\n\n        this.setState({ [name]: value });\n    };\n\n    // Handling of dropping event. This function also updates the state\n    // when a component is being dropped\n    onDrop = (ev, cat) => {\n        let repeat, id;\n\n        if (ev.dataTransfer.getData('repeat')) {\n            repeat = ev.dataTransfer.getData('repeat') === 'true' ? true : false;\n            id = ev.dataTransfer.getData('id');\n        } else {\n            repeat = this.state.draggedDivRepeat;\n            id = this.state.draggedDivId;\n        }\n\n        let placed = null;\n        let { counter, modalName, roomName, roomId, room } = this.state;\n        const { currentUser } = this.props;\n        counter++;\n\n        if (cat === 'complete' && !repeat) {\n            placed = this.state.tasks;\n            placed = placed.find(task => task.key === id);\n            placed = JSON.parse(JSON.stringify(placed));\n            placed.key = placed.key + '-' + counter;\n            placed.category = cat;\n            placed.selected = false;\n            placed.positionx = ev.pageX;\n            placed.positiony = ev.pageY;\n            placed.name = modalName;\n            const prevPlaced = this.state.placed;\n            placed = [placed, ...prevPlaced];\n        }\n\n        if (repeat) {\n            let prevPlaced = this.state.placed;\n            placed = prevPlaced.find(task => task.key === id);\n            placed.category = cat;\n            placed.positionx = ev.pageX;\n            placed.positiony = ev.pageY;\n            placed = [...prevPlaced];\n        }\n\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${currentUser.tokens.access.token}`,\n            },\n            body: JSON.stringify({\n                name: roomName,\n                userlist: room.userlist,\n                createdBy: room.createdBy,\n                placed,\n                counter,\n            }),\n        };\n\n        fetch(apiUrl + `/rooms/manage/${roomId}`, requestOptions)\n            .then(async response => {\n                const data = await response.json();\n\n                if (!response.ok) {\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n                \n                this.setState({\n                    placed,\n                    counter,\n                    toShowModal: false,\n                    modalName: '',\n                }, () => {\n                    const savedState = this.state;\n                    delete savedState.tempEvent;\n                    socket.emit('send_state', savedState);\n                });\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                console.error('Error!: ', error);\n\n            });\n            return true;\n    };\n\n    // Handle selecting elements\n    handleClick = key => {\n        const { placed } = this.state;\n\n        const newPlaced = placed.filter(pl => {\n            if (pl.key === key) {\n                pl.selected = !pl.selected;\n            }\n\n            return pl;\n        });\n\n        this.setState({\n            placed: newPlaced,\n        });\n    };\n\n    // Handle deletion of elements\n    handleDelete = e => {\n        if (String(e.key) === 'Delete') {\n            const { placed, roomName, room, roomId, counter } = this.state;\n            const { currentUser } = this.props;\n\n            const newPlaced = placed.filter(pl => {\n                if (!pl.selected) {\n                    return pl;\n                }\n                return null;\n            });\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${currentUser.tokens.access.token}`,\n                },\n                body: JSON.stringify({\n                    name: roomName,\n                    userlist: room.userlist,\n                    createdBy: room.createdBy,\n                    placed: newPlaced,\n                    counter,\n                }),\n            };\n\n            fetch(apiUrl + `/rooms/manage/${roomId}`, requestOptions)\n                .then(async response => {\n                    const data = await response.json();\n\n                    if (!response.ok) {\n                        const error = (data && data.message) || response.status;\n                        return Promise.reject(error);\n                    }\n\n                    this.setState(\n                        {\n                            placed: newPlaced,\n                        },\n                        () => {\n                            const savedState = this.state;\n                            socket.emit('send_state', savedState);\n                        }\n                    );\n                })\n                .catch(error => {\n                    this.setState({ errorMessage: error.toString() });\n                    alert('Error!: ', error);\n                });\n        }\n    };\n\n    render() {\n        const tasks = {\n            complete: [],\n        };\n\n        const { modalX, modalY, modalName } = this.state;\n\n        // Load previously placed elements\n        if (this.state.placed.length > 0) {\n            this.state.placed.forEach(t => {\n                tasks['complete'].push(\n                    <div\n                        key={t.key}\n                        onDragStart={e => this.onDragStart(e, t.key, true)}\n                        draggable\n                        className={t.selected ? 'draggable selected' : 'draggable'}\n                        onClick={() => {\n                            this.handleClick(t.key);\n                        }}\n                        style={{\n                            position: 'absolute',\n                            top: t.positiony - 50 + 'px',\n                            left: t.positionx - 160 + 'px',\n                            fontSize: t.fontSize + 'px',\n                            fontWeight: t.fontWeight,\n                        }}\n                    >\n                        {t.name}\n                    </div>\n                );\n            });\n        }\n\n        // const { setCurrentSavedState } = this.props;\n        // const { socket } = this.state;\n\n        // Actual page rendering\n        return (\n            <div className='drag-drop-page' onKeyDown={e => this.handleDelete(e)} tabIndex='0'>\n                <div className='container-drag'>\n                    <div className='droppable' onDragOver={e => this.onDragOver(e)} onDrop={e => this.showModal(e)}>\n                        {tasks.complete}\n                    </div>\n                    <div\n                        className='wip'\n                        onDragOver={e => this.onDragOver(e)}\n                        onDrop={e => {\n                            this.onDrop(e, 'wip');\n                        }}\n                    >\n                        <h2>Annotations</h2>\n                        <div onDragStart={e => this.onDragStart(e, 'label')} draggable className='draggable'>\n                            <AppstoreOutlined style={{ marginRight: 8, color: '#D4D4D4' }} />\n                            Label\n                        </div>\n                    </div>\n                </div>\n                <Modal\n                    title='Edit Label'\n                    visible={this.state.modalVisible}\n                    onOk={this.handleOk}\n                    onCancel={this.handleCancel}\n                >\n                    <Space direction='vertical' style={{ width: '100%' }}>\n                        Text\n                        <Input\n                            type='text'\n                            placeholder='Enter text to be displayed inside element'\n                            name='modalName'\n                            value={modalName}\n                            onChange={this.handleChange}\n                        />\n                        X\n                        <Input type='text' value={modalX + 'px'} disabled />\n                        Y\n                        <Input type='text' value={modalY + 'px'} disabled />\n                    </Space>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentUser: user => {\n            dispatch(setCurrentUser(user));\n        },\n    };\n};\n\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DragDropPage);\n","/** @format */\n\nimport { UserActionTypes } from './user.types';\n\nconst setCurrentUser = user => {\n    return {\n        type: UserActionTypes.SET_CURRENT_USER,\n        payload: user,\n    };\n};\n\nexport { setCurrentUser };\n","/** @format */\n\nimport React, { Component } from 'react';\nimport './login-page.styles.scss';\n\nimport { apiUrl } from '../../config/config.json';\n\nimport { Input, Button, PageHeader } from 'antd';\nimport { UserOutlined, EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\nimport { connect } from 'react-redux';\n\nimport { setCurrentUser } from '../../redux/user/user.actions';\nimport { withRouter } from 'react-router-dom';\n\nclass LoginPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n        };\n    }\n\n    handleChange = event => {\n        const { value, name } = event.target;\n\n        this.setState({ [name]: value });\n    };\n\n    handleSubmit = () => {\n        const { setCurrentUser, history } = this.props;\n        const { email, password } = this.state;\n\n        const data = {\n            email,\n            password,\n        };\n\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        };\n\n        fetch(apiUrl + '/auth/login', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n                setCurrentUser(data);\n                history.push('/chat');\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                console.error('Error: ', error);\n            });\n    };\n\n    render() {\n        const { email, password } = this.state;\n        const { history } = this.props;\n\n        return (\n            <div className='login-page'>\n                <div className='page-header'>\n                    <PageHeader className='site-page-header' title='Chat App' subTitle='Login' />,\n                </div>\n                <div className='form'>\n                    <Input\n                        name='email'\n                        size='large'\n                        className='email-input'\n                        placeholder='Enter your email address'\n                        prefix={<UserOutlined />}\n                        value={email}\n                        onChange={this.handleChange}\n                    />\n                    <Input.Password\n                        className='password-input'\n                        size='large'\n                        placeholder='Enter your password'\n                        iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n                        onChange={this.handleChange}\n                        name='password'\n                        value={password}\n                    />\n                    <Button\n                        type='link'\n                        className='register-link'\n                        onClick={() => {\n                            history.push('/register');\n                        }}\n                        block\n                    >\n                        Register?\n                    </Button>\n                    <Button type='primary' size='large' block onClick={this.handleSubmit}>\n                        Login\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentUser: user => {\n            dispatch(setCurrentUser(user));\n        },\n    };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(LoginPage));\n","/** @format */\n\nconst { createSelector } = require('reselect');\n\nconst selectUser = state => state.user;\n\nconst selectCurrentUser = createSelector([selectUser], user => user.currentUser);\n\nexport { selectCurrentUser };\n","/** @format */\n\nimport React, { Component } from 'react';\nimport './register-page.styles.scss';\n\nimport { apiUrl } from '../../config/config.json';\n\nimport { Input, Button, PageHeader } from 'antd';\nimport { UserOutlined, EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\nimport { connect } from 'react-redux';\n\nimport { setCurrentUser } from '../../redux/user/user.actions';\nimport { withRouter } from 'react-router-dom';\n\nclass RegisterPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n        };\n    }\n\n    handleChange = event => {\n        const { value, name } = event.target;\n\n        this.setState({ [name]: value });\n    };\n\n    handleSubmit = () => {\n        const { setCurrentUser, history } = this.props;\n        const { name, email, password } = this.state;\n\n        const data = {\n            name,\n            email,\n            password,\n        };\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data),\n        };\n\n        fetch(apiUrl + '/auth/register', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response status\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n                setCurrentUser(data);\n                history.push('/chat');\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                alert('Error: ' + error);\n                // console.error('There was an error!', error);\n            });\n    };\n\n    render() {\n        const { name, email, password } = this.state;\n        const { history } = this.props;\n\n        return (\n            <div className='register-page'>\n                <div className='page-header'>\n                    <PageHeader className='site-page-header' title='Chat App' subTitle='Register' />,\n                </div>\n                <div className='form'>\n                    <Input\n                        name='name'\n                        size='large'\n                        className='name-input'\n                        placeholder='Enter your name'\n                        prefix={<UserOutlined />}\n                        value={name}\n                        onChange={this.handleChange}\n                    />\n                    <Input\n                        name='email'\n                        size='large'\n                        className='email-input'\n                        placeholder='Enter your email address'\n                        prefix={<UserOutlined />}\n                        value={email}\n                        onChange={this.handleChange}\n                    />\n                    <Input.Password\n                        className='password-input'\n                        size='large'\n                        placeholder='Enter your password'\n                        iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n                        onChange={this.handleChange}\n                        name='password'\n                        value={password}\n                    />\n                    <Button\n                        type='link'\n                        className='login-link'\n                        onClick={() => {\n                            history.push('/');\n                        }}\n                        block\n                    >\n                        Login?\n                    </Button>\n                    <Button type='primary' size='large' block onClick={this.handleSubmit}>\n                        Register\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentUser: user => {\n            dispatch(setCurrentUser(user));\n        },\n    };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(RegisterPage));\n","/** @format */\n\nimport React, { Component } from 'react';\nimport './rooms.styles.scss';\n\nimport { Select, PageHeader, Button, Modal, Input, Empty } from 'antd';\n// import { Input, PageHeader, List, Layout, Menu, Button } from 'antd';\n// import { UserOutlined, MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons';\n\nimport { connect } from 'react-redux';\n\nimport { setCurrentUser } from '../../redux/user/user.actions';\nimport { withRouter } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\n\nimport { apiUrl } from '../../config/config.json';\n\nconst { Option } = Select;\n\nclass RoomPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomName: '',\n            isModalVisible: false,\n            userlist: [],\n            selectedUsers: [],\n            roomslist: [],\n        };\n    }\n\n    componentDidMount = () => {\n        const { currentUser } = this.props;\n        let userlist = [];\n        let roomslist = [];\n\n        const headers = {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${currentUser.tokens.access.token}`,\n        };\n\n        fetch(apiUrl + '/users', { headers })\n            .then(async response => {\n                const data = await response.json();\n\n                if (!response.ok) {\n                    const error = (data && data.message) || response.statusText;\n                    return Promise.reject(error);\n                }\n\n                data.results.forEach(user => {\n                    if (user.id !== currentUser.user.id) {\n                        userlist.push(<Option key={user.id}>{user.name}</Option>);\n                    }\n                });\n\n                this.setState({ userlist });\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                console.error('Error!: ', error);\n            });\n\n        fetch(apiUrl + `/rooms/getRooms/${currentUser.user.id}`, { headers })\n            .then(async response => {\n                const data = await response.json();\n\n                if (!response.ok) {\n                    const error = (data && data.message) || response.statusText;\n                    return Promise.reject(error);\n                }\n\n                roomslist = data;\n                this.setState({\n                    roomslist,\n                });\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                console.error('Error!: ', error);\n            });\n    };\n\n    showModal = () => {\n        this.setState({\n            isModalVisible: true,\n        });\n    };\n\n    handleSelectChange = value => {\n        this.setState({\n            selectedUsers: [...value],\n        });\n    };\n\n    handleSubmit = () => {\n        const { selectedUsers, roomName, roomslist } = this.state;\n        const { currentUser } = this.props;\n\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${currentUser.tokens.access.token}`,\n            },\n            body: JSON.stringify({\n                name: roomName,\n                userlist: selectedUsers,\n                createdBy: currentUser.user.id,\n            }),\n        };\n\n        fetch(apiUrl + '/rooms', requestOptions)\n            .then(async response => {\n                const data = await response.json();\n\n                if (!response.ok) {\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n\n                roomslist.push(data);\n\n                this.setState({\n                    roomslist,\n                });\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                alert('Error!: ', error);\n            });\n\n        this.setState({\n            isModalVisible: false,\n        });\n    };\n\n    handleCancel = () => {\n        this.setState({\n            isModalVisible: false,\n        });\n    };\n\n    handleChange = event => {\n        const { value, name } = event.target;\n\n        this.setState({ [name]: value });\n    };\n\n    handleRedirect = (roomName, roomId) => {\n        const { history } = this.props;\n\n        window.localStorage.setItem('roomName', roomName);\n        window.localStorage.setItem('currentRoomId', roomId);\n        history.push('/dragdrop');\n    };\n\n    render() {\n        const { roomName, isModalVisible, userlist, selectedUsers, roomslist } = this.state;\n        const { history, currentUser } = this.props;\n\n        const rooms = [];\n        if (roomslist.length > 0) {\n            roomslist.forEach(room => {\n                rooms.push(\n                    <div className='rooms' onClick={() => this.handleRedirect(room.name, room.id)}>\n                        {room.name}\n                    </div>\n                );\n            });\n        }\n\n        return (\n            <div className='room-page'>\n                <div className='page-header'>\n                    <PageHeader\n                        className='site-page-header'\n                        title='Chat App'\n                        subTitle={currentUser.user.name}\n                        extra={\n                            currentUser.user.role === 'admin'\n                                ? [\n                                      <Button key='1' shape='round' onClick={this.showModal}>\n                                          Create New Room\n                                      </Button>,\n                                      <Button\n                                          key='2'\n                                          type='primary'\n                                          onClick={() => {\n                                              history.push('/annotation-rooms');\n                                          }}\n                                      >\n                                          Annotations\n                                      </Button>,\n                                      <Button\n                                          key='3'\n                                          onClick={() => {\n                                              localStorage.removeItem('persist:gsoc-challenge-chat-app');\n                                              window.location.reload();\n                                          }}\n                                      >\n                                          Logout\n                                      </Button>,\n                                  ]\n                                : [\n                                      <Button\n                                          key='1'\n                                          onClick={() => {\n                                              localStorage.removeItem('persist:gsoc-challenge-chat-app');\n                                              window.location.reload();\n                                          }}\n                                      >\n                                          Logout\n                                      </Button>,\n                                  ]\n                        }\n                        onBack={() => {\n                            history.goBack();\n                        }}\n                    />\n                    ,\n                </div>\n                <div className='content'>\n                    <div className='rooms-collection'>\n                        {roomslist && roomslist.length > 0 ? rooms : <Empty description={'No rooms to show'} />}\n                    </div>\n                </div>\n                <Modal title='Basic Modal' visible={isModalVisible} onOk={this.handleSubmit} onCancel={this.handleCancel}>\n                    <h2>Create a new room for annotations</h2>\n                    <Input\n                        placeholder='Enter name of the Room'\n                        name='roomName'\n                        value={roomName}\n                        onChange={this.handleChange}\n                        style={{ marginBottom: '10px' }}\n                    />\n                    <Select\n                        mode='multiple'\n                        allowClear\n                        style={{ width: '100%' }}\n                        value={selectedUsers}\n                        placeholder='Please select the admitted users'\n                        onChange={this.handleSelectChange}\n                    >\n                        {userlist}\n                    </Select>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentUser: user => {\n            dispatch(setCurrentUser(user));\n        },\n    };\n};\n\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser,\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RoomPage));\n","/** @format */\n\n// import logo from './logo.svg';\nimport React from 'react';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport LoginPage from './pages/login-page/login-page.component';\nimport ChatPage from './pages/chat-page/chat-page.component';\n\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { selectCurrentUser } from './redux/user/user.selector';\nimport RegisterPage from './pages/register-page/register-page.component';\nimport RoomPage from './pages/room/room.pages';\nimport DragDropPage from './pages/dragdrop/dragdrop.pages';\n\nclass App extends React.Component {\n    render() {\n        const { currentUser } = this.props;\n\n        return (\n            <Switch>\n                <Route\n                    exact\n                    path='/'\n                    render={() => (currentUser ? <Redirect to='/chat'></Redirect> : <LoginPage />)}\n                ></Route>\n                <Route\n                    exact\n                    path='/annotation-rooms'\n                    render={() => (currentUser ? <RoomPage /> : <Redirect to='/'></Redirect>)}\n                ></Route>\n                <Route\n                    exact\n                    path='/dragdrop'\n                    render={() => (currentUser ? <DragDropPage /> : <Redirect to='/'></Redirect>)}\n                ></Route>\n                <Route\n                    exact\n                    path='/register'\n                    render={() => (currentUser ? <Redirect to='/chat'></Redirect> : <RegisterPage />)}\n                ></Route>\n                <Route exact path='/chat' render={() => (currentUser ? <ChatPage /> : <Redirect to='/'></Redirect>)}></Route>\n            </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    currentUser: selectCurrentUser,\n});\n\nexport default connect(mapStateToProps)(App);\n","/** @format */\n\nconst reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","/** @format */\n\nimport { persistStore } from 'redux-persist';\n\nconst { default: logger } = require('redux-logger');\nconst { createStore, applyMiddleware } = require('redux');\nconst { default: rootReducer } = require('./root.reducer');\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","/** @format */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        {/* <React.StrictMode> */}\n        <BrowserRouter>\n            <PersistGate persistor={persistor}>\n                <App />\n            </PersistGate>\n        </BrowserRouter>\n        {/* </React.StrictMode> */}\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/** @format */\n\nimport { UserActionTypes } from './user.types';\n\nconst INITIAL_STATE = {\n    currentUser: null,\n};\n\nconst userReducer = (state = INITIAL_STATE, { type, payload }) => {\n    switch (type) {\n        case UserActionTypes.SET_CURRENT_USER:\n            return {\n                ...state,\n                currentUser: payload,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default userReducer;\n","/** @format */\n\nimport { combineReducers } from 'redux';\n\nimport userReducer from './user/user.reducer';\n// import savedStateReducer from './saved-state/saved-state.reducer';\n\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\n\nconst rootReducer = combineReducers({\n    user: userReducer,\n    // savedState: savedStateReducer,\n});\n\nconst persistConfig = {\n    key: 'gsoc-challenge-chat-app',\n    storage: storage,\n};\n\nexport default persistReducer(persistConfig, rootReducer);\n"],"sourceRoot":""}